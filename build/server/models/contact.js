// Generated by CoffeeScript 1.8.0
var Contact, VCardParser, americano, fs;

fs = require('fs');

americano = require('americano-cozy');

VCardParser = require('cozy-vcard');

module.exports = Contact = americano.getModel('Contact', {
  id: String,
  carddavuri: String,
  fn: String,
  n: String,
  datapoints: Object,
  note: String,
  _attachments: Object
});

Contact.prototype.getURI = function() {
  return this.carddavuri || this.id + '.vcf';
};

Contact.all = function(cb) {
  return Contact.request('byURI', cb);
};

Contact.byURI = function(uri, cb) {
  var req;
  req = Contact.request('byURI', null, cb);
  req.body = JSON.stringify({
    key: uri
  });
  return req.setHeader('content-type', 'application/json');
};

Contact.prototype.toVCF = function(callback) {
  var buffers, stream, _ref;
  if (((_ref = this._attachments) != null ? _ref.picture : void 0) != null) {
    stream = this.getFile('picture', function() {});
    buffers = [];
    stream.on('data', buffers.push.bind(buffers));
    return stream.on('end', function() {
      var picture;
      picture = Buffer.concat(buffers).toString('base64');
      return callback(null, VCardParser.toVCF(this, picture));
    });
  } else {
    return callback(null, VCardParser.toVCF(this));
  }
};

Contact.prototype.handlePhoto = function(photo, callback) {
  var filePath;
  if (photo != null) {
    filePath = "/tmp/" + this.id + ".jpg";
    return fs.writeFile(filePath, photo, {
      encoding: 'base64'
    }, (function(_this) {
      return function(err) {
        return _this.attachFile(filePath, {
          name: 'picture'
        }, function(err) {
          return fs.unlink(filePath, callback);
        });
      };
    })(this));
  } else {
    return callback(null);
  }
};

Contact.parse = function(vcf) {
  var contact, parser;
  parser = new VCardParser();
  parser.read(vcf);
  contact = parser.contacts[0];
  if (contact.fn && contact.n) {
    delete contact.fn;
  }
  return new Contact(parser.contacts[0]);
};
